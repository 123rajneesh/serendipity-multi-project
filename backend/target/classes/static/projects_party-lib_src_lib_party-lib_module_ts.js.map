{"version":3,"file":"projects_party-lib_src_lib_party-lib_module_ts.js","mappings":"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","sources":["./projects/party-lib/src/lib/adapters/contact.adapter.ts","./projects/party-lib/src/lib/components/contacts/contacts.component.ts","./projects/party-lib/src/lib/components/contacts/contacts.component.html","./projects/party-lib/src/lib/models/column-defs.ts","./projects/party-lib/src/lib/models/constants.ts","./projects/party-lib/src/lib/models/contact.ts","./projects/party-lib/src/lib/models/individual-ref.ts","./projects/party-lib/src/lib/models/individual.ts","./projects/party-lib/src/lib/models/name.ts","./projects/party-lib/src/lib/models/organisation-ref.ts","./projects/party-lib/src/lib/models/party.ts","./projects/party-lib/src/lib/party-lib-routing.module.ts","./projects/party-lib/src/lib/party-lib.module.ts","./projects/party-lib/src/lib/services/abstract/collection/collection.service.ts","./projects/party-lib/src/lib/services/contacts/contacts.service.ts","./projects/party-lib/src/lib/types/party-type.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { Adapter, LoggerService } from 'utils-lib';\n\nimport { Contact } from '../models/contact';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactAdapter implements Adapter<Contact> {\n\n  constructor(private logger: LoggerService) {\n\n    this.logger.info('ContactAdapter initialised');\n  }\n\n  adapt(item: any): Contact {\n\n    // this.logger.info('item: ' + JSON.stringify(item, null, 2));\n\n    const contact = new Contact(\n      item.party,\n      item.name,\n      item.sex,\n      item.email,\n      item.phoneNumber,\n      item.photoUrl,\n      item.electorate,\n      item.dateOfBirth,\n      item.placeOfBirth,\n    );\n\n    // https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/Base64_encoding_and_decoding\n\n    contact.id = btoa(item.id);\n\n    contact.photoUrl = 'http://localhost:30001/' + item.photoUrl;\n\n    if (item.party.addresses && item.party.addresses.length) {\n      contact.party.addresses = contact.party.addresses.concat(item.party.addresses);\n    }\n\n    if (item.party.roles && item.party.roles.length) {\n\n      contact.party.roles = contact.party.roles.concat(item.party.roles);\n\n      contact.organisation.id = btoa(contact.party.roles[0].reciprocalPartyId);\n      contact.organisation.displayName = contact.party.roles[0].reciprocalPartyName;\n      contact.organisation.email = contact.party.roles[0].reciprocalPartyEmail;\n      contact.organisation.phoneNumber = contact.party.roles[0].reciprocalPartyPhoneNumber;\n    }\n\n    // this.logger.info('contact: ' + JSON.stringify(contact, null, 2));\n\n    return contact;\n  }\n\n}\n","import { Component } from '@angular/core';\n\nimport { MatTableDataSource } from '@angular/material/table';\n\nimport { CollectionComponent } from 'serendipity-components-lib';\n\nimport { ContactAdapter } from '../../adapters/contact.adapter';\nimport { ContactsService } from '../../services/contacts/contacts.service';\n\nimport { Contact } from '../../models/contact';\nimport { CONTACTS_COLUMN_DEFS } from '../../models/column-defs';\n\nimport {\n  CONTACTS_COLUMNS_DESKTOP,\n  CONTACTS_COLUMNS_MOBILE\n} from '../../models/constants';\n\n@Component({\n  selector: 'lib-contacts',\n  templateUrl: './contacts.component.html',\n  styleUrls: ['./contacts.component.scss']\n})\nexport class ContactsComponent extends CollectionComponent<Contact> {\n\n  constructor(private entityAdapter: ContactAdapter,\n              private entityService: ContactsService) {\n\n    super({\n      columnDefsFilename: CONTACTS_COLUMN_DEFS,\n      desktopDeviceColumns: CONTACTS_COLUMNS_DESKTOP,\n      mobileDeviceColumns: CONTACTS_COLUMNS_MOBILE,\n      limit: 10\n    });\n\n  }\n\n  protected subscribe() {\n\n    this.logger.info('ContactsComponent: subscribe()');\n\n    this.items.push(new Contact());\n\n    this.dataSource = new MatTableDataSource(this.items);\n    this.dataSource.data = this.items;\n    this.dataSource.sortingDataAccessor = pathDataAccessor;\n    this.dataSource.sort = this.sort;\n\n  }\n\n  /*\n\n  protected subscribe() {\n\n    this.logger.info('ContactsComponent: subscribe()');\n\n    this.subscription = this.entityService.find(this.filter, this.offset, this.limit).subscribe(\n\n      (response: any) => {\n\n        this.logger.info('ContactsComponent: subscribe() success handler');\n\n        this.count = response.body.page.totalElements;\n\n        this.logger.info('count: ' + this.count);\n\n        if (this.count > 0) {\n\n          this.items = response.body._embedded.individualModels.map(\n            ((item: any) => this.entityAdapter.adapt(item)));\n\n        } else {\n\n          // this.items = [];\n          this.items.push(new Contact());\n\n        }\n\n        // this.logger.info('items: ' + JSON.stringify(this.items, null, 2));\n\n        this.dataSource = new MatTableDataSource(this.items);\n        this.dataSource.data = this.items;\n        this.dataSource.sortingDataAccessor = pathDataAccessor;\n        this.dataSource.sort = this.sort;\n\n      }\n\n    );\n\n   }\n\n   */\n\n  //\n  // Command Bar events\n  //\n\n  public onNew() {\n\n    this.logger.info('ContactsComponent: onNew()');\n\n    this.router.navigate(['customers/contacts/new']);\n  }\n\n}\n\n// https://stackoverflow.com/questions/48891174/angular-material-2-datatable-sorting-with-nested-objects\n\nfunction pathDataAccessor(item: any, path: string): any {\n  return path.split('.')\n    .reduce((accumulator: any, key: string) => {\n      return accumulator ? accumulator[key] : undefined;\n    }, item);\n}\n","<command-bar>\n\n  <button mat-flat-button class=\"default-command-bar-button\">\n    <mat-icon> add </mat-icon>\n    <span i18n=\"Command Bar Item|Contacts@@NEW\">\n      NEW\n    </span>\n  </button>\n\n  <button mat-flat-button class=\"command-bar-button\" disabled>\n    <mat-icon> description </mat-icon>\n    <span i18n=\"Command Bar Item|Contacts@@RUN_REPORT\">\n      RUN REPORT\n    </span>\n  </button>\n\n</command-bar>\n\n<activity-bar>\n\n  <span class=\"activity-bar-title\" i18n=\"Activity Bar Title|Contacts@@CONTACTS_TITLE\">\n    Contacts\n  </span>\n\n</activity-bar>\n\n<div class=\"content-container\">\n\n  <ng-container *ngIf=\"!items; then skeleton\"> </ng-container>\n\n  <div class=\"table-container\">\n\n    <ng-container *ngIf=\"columnDefs\">\n\n      <table mat-table\n             [hidden]=\"!items\"\n             [dataSource]=\"dataSource\"\n             matSort\n             matSortStart=\"desc\"\n             matSortDisableClear\n             class=\"mat-elevation-z8 crm-table\">\n\n        <ng-container *ngFor=\"let column of columnDefs\" [matColumnDef]=\"column.name\">\n\n          <th mat-header-cell *matHeaderCellDef mat-sort-header>\n            {{ column.displayName }}\n          </th>\n\n          <td mat-cell *matCellDef=\"let row\">\n\n            <!-- See: .scss for mat-column styles -->\n\n            <ng-container *ngIf=\"!column.routerLink; else link\">\n              {{ getProperty(row, column.name) }}\n            </ng-container>\n\n            <ng-template #link>\n              <a *ngIf=\"column.name === 'party.displayName'\"\n                 [routerLink]=\"[getProperty(row, column.routerLink)]\">\n                {{ getProperty(row, column.name) }}\n              </a>\n              <a *ngIf=\"column.name === 'organisation.displayName'\"\n                 [routerLink]=\"['/sales/accounts', getProperty(row, column.routerLink)]\">\n                {{ getProperty(row, column.name) }}\n              </a>\n            </ng-template>\n\n          </td>\n\n        </ng-container>\n\n        <!-- ID column (padding column RTL) -->\n\n        <ng-container matColumnDef=\"id\">\n          <th mat-header-cell *matHeaderCellDef class=\"header-cell-id\">\n            <button mat-icon-button>\n              <mat-icon matListIcon class=\"header-icon\">autorenew</mat-icon>\n            </button>\n          </th>\n          <td mat-cell *matCellDef=\"let element\"> </td>\n          <td mat-footer-cell *matFooterCellDef> </td>\n        </ng-container>\n\n        <!-- Footer -->\n\n        <ng-container matColumnDef=\"footer\">\n          <td mat-footer-cell *matFooterCellDef [attr.colspan]=\"footerColSpan\">\n            <sales-collection-footer [host]=\"this\">\n            </sales-collection-footer>\n          </td>\n        </ng-container>\n\n        <tr mat-header-row *matHeaderRowDef=\"displayedColumns; sticky: true\"></tr>\n        <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n        <tr mat-footer-row *matFooterRowDef=\"['footer']; sticky: true\"></tr>\n\n      </table>\n\n    </ng-container>\n\n  </div> <!-- crm-table-container -->\n\n  <!-- Skeleton template -->\n\n  <ng-template #skeleton>\n\n    <div class=\"crm-spinner-container\">\n      <mat-spinner color=\"accent\"></mat-spinner>\n    </div>\n\n  </ng-template>\n\n</div>\n\n<!--\n\n<div>\n\n  <span>\n    Testing 1, 2, 3\n  </span>\n\n</div>\n\n-->\n","export const ACCOUNTS_COLUMN_DEFS = 'accounts-column-defs';\nexport const ACTIVITIES_COLUMN_DEFS = 'activities-column-defs';\nexport const CONTACTS_COLUMN_DEFS = 'contacts-column-defs';\n","// See: variables.scss\n\n/*\n\n// https://github.com/angular/material2/blob/master/src/lib/toolbar/toolbar.scss\n\n$mat-toolbar-height-desktop: 64px !default;\n$mat-toolbar-height-mobile: 56px !default;\n$mat-toolbar-row-padding: 16px !default;\n\n@media ($mat-xsmall) {\n  @include mat-toolbar-height($mat-toolbar-height-mobile);\n}\n\n*/\n\n// btoa(0) === 'MA=='\n\nexport const ZERO = '/MA==';\nexport const ACCOUNTS = 'sales/accounts';\nexport const CONTACTS = 'sales/contacts';\nexport const ACTIVITIES = 'sales/activities';\n\nexport const MAT_XSMALL = '(max-width: 599px)';\n\nexport const FAKE_ITEMS_LENGTH = 16;\n\n// export const TOOLBAR_HEIGHT_DESKTOP = 64;\n// export const TOOLBAR_HEIGHT_MOBILE  = 56;\n\nexport const NAVIGATION_BAR_HEIGHT_DESKTOP = 64;\nexport const NAVIGATION_BAR_HEIGHT_MOBILE  = 56;\n\nexport const COMMAND_BAR_HEIGHT_DESKTOP = 56;\nexport const COMMAND_BAR_HEIGHT_MOBILE  = 0;  // 48, fxHide.xs\n\nexport const COMMAND_BAR_SIDENAV_WIDTH = 200;\n\nexport const VIEW_BAR_HEIGHT_DESKTOP = 96;\nexport const VIEW_BAR_HEIGHT_MOBILE  = 84;\n\nexport const MARGIN_DESKTOP = 32;\nexport const MARGIN_MOBILE  = 0;\n\nexport const ALPHABET: string[] = [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\n  'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' ];\n\nexport const ACCOUNTS_COLUMNS_DESKTOP = [ 'name', 'phoneNumber', 'individual.displayName', 'individual.email', 'id' ];\nexport const ACCOUNTS_COLUMNS_MOBILE  = [ 'name', 'phoneNumber', 'id' ];\n\nexport const ACTIVITIES_COLUMNS_DESKTOP = [ 'type', 'subject', 'regarding', 'priority', 'startDate', 'dueDate', 'id' ];\nexport const ACTIVITIES_COLUMNS_MOBILE  = [ 'type', 'subject', 'id' ];\n\nexport const CONTACTS_COLUMNS_DESKTOP = [ 'party.displayName', 'email', 'organisation.displayName', 'organisation.phoneNumber', 'id' ];\nexport const CONTACTS_COLUMNS_MOBILE  = [ 'party.displayName', 'organisation.phoneNumber', 'id' ];\n\n//\n// TODO\n//\n\n// top, right, bottom, and left\n\nexport const MARGIN = 32;\nexport const MARGIN_TOP = 32;\nexport const MARGIN_RIGHT = 32;\nexport const MARGIN_BOTTOM = 32;\nexport const MARGIN_LEFT = 32;\n\n/*\n\nexport const ALPHABET: string[] = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm',\n  'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' ];\n\n*/\n","import { Individual } from './individual';\n\n// tslint:disable-next-line:no-empty-interface\n// export interface Contact extends Individual {}\nexport class Contact extends Individual {}\n","export class IndividualRef {\n\n  constructor(\n    public id: string = '',\n    public displayName: string = '',\n    public email: string = '',\n    public phoneNumber: string = ''\n  ) {}\n\n}\n","import { Name } from './name';\nimport { OrganisationRef } from './organisation-ref';\nimport { Party } from './party';\n\nimport { PartyType } from '../types/party-type';\n\nconst defaultName: Name = new Name(\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  '',\n  ''\n);\n\nexport class Individual {\n\n  public id?: string;\n\n  constructor(\n    public party: Party = new Party(PartyType.INDIVIDUAL),\n    public name: Name = defaultName,\n    public sex: string = '',\n    public email: string = '',\n    public phoneNumber: string = '',\n    public photoUrl: string = '',\n    public electorate: string = '',\n    public dateOfBirth: string = '',\n    public placeOfBirth: string = '',\n  ) {\n    this.organisation = new OrganisationRef();\n  }\n\n  public organisation: OrganisationRef;\n\n}\n\n// https://google.github.io/styleguide/jsoncstyleguide.xml\n","export class Name {\n\n  constructor(\n    public title: string = '',\n    public givenName: string = '',\n    public middleName: string = '',\n    public familyName: string = '',\n    public preferredName: string = '',\n    public initials: string = '',\n    public honorific: string = '',\n    public salutation: string = ''\n\n  ) {}\n\n}\n\n/*\n\n  private String title;         // name prefix\n  private String givenName;\n  private String preferredGivenName;\n  private String middleName;    // otherNames\n  private String familyName;\n  private String preferredFamilyName;\n  private String preferredName; // informalSalutation\n  private String initials;\n  private String honorific;     // name suffix\n  private String salutation;    // formalSalutation\n\n*/\n","import { IndividualRef } from './individual-ref';\n\n// tslint:disable-next-line:no-empty-interface\n// export interface Contact extends Individual {}\nexport class OrganisationRef extends IndividualRef {}\n","import { Address } from './address';\nimport { Role } from './role';\n\nexport class Party {\n\n  public id?: string;\n\n  public legalType: string;\n\n  constructor(\n    public type: string = 'PARTY',\n    public displayName: string = '',\n    public addresses: Address[] = [],\n    public roles: Role[] = []\n  ) {\n    this.legalType = '';\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ContactsComponent } from './components/contacts/contacts.component';\n\nconst routes: Routes = [\n\n  {\n    path: 'contacts',\n    component: ContactsComponent,\n    // canActivate: [AuthGuard],\n    runGuardsAndResolvers: 'always'\n  }\n\n  /*\n  {\n    path: 'contacts/new',\n    component: ContactWizardComponent,\n    canActivate: [AuthGuard],\n    runGuardsAndResolvers: 'always'\n  },\n  {\n    path: 'contacts/:id',\n    component: ContactComponent,\n    canActivate: [AuthGuard],\n    canDeactivate: [CanDeactivateGuard],\n    runGuardsAndResolvers: 'always'\n  }\n  */\n\n];\n\n@NgModule({\n  imports: [ RouterModule.forChild(routes) ],\n  exports: [ RouterModule ]\n})\nexport class PartyLibRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule } from '@angular/common/http';\n\n//\n// Utils lib\n//\n\nimport { AngularMaterialModule } from 'utils-lib';\nimport { LoggerService } from 'utils-lib';\nimport { SerendipityComponentsLibModule } from 'serendipity-components-lib';\n// import { UtilsLibModule } from 'utils-lib';\n\n//\n// Components - local\n//\n\nimport { ContactsComponent } from './components/contacts/contacts.component';\n\n//\n// PartyLibRoutingModule: https://angular.io/guide/router#routing-module-order\n//\n\nimport { PartyLibRoutingModule } from './party-lib-routing.module';\n\nconst components: any[] = [\n  ContactsComponent\n];\n\n@NgModule({\n  declarations: [\n    ...components\n  ],\n  imports: [\n    AngularMaterialModule,\n    CommonModule,\n    HttpClientModule,\n    SerendipityComponentsLibModule,\n\n    // See core.module.ts\n    // UtilsLibModule,\n\n    // https://angular.io/guide/router#routing-module-order\n    PartyLibRoutingModule\n  ],\n  exports: [\n    ...components\n  ]\n})\nexport class PartyLibModule {\n\n  constructor(private logger: LoggerService) {\n    this.logger.info('Party Library initialised');\n  }\n\n}\n","import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Injector, Type } from '@angular/core';\n\nimport { EnvironmentService, HttpOptions, LoggerService, StaticInjectorService } from 'utils-lib';\n\nimport { PartyConfig } from '../../../models/config';\n// import { HttpOptions } from '../../../models/http-options';\n\nexport abstract class CollectionService {\n\n  protected config: PartyConfig;\n  protected httpOptions: HttpOptions | undefined;\n  protected url = '';\n\n  protected environmentService: EnvironmentService;\n  protected httpClient: HttpClient;\n  protected logger: LoggerService;\n\n  constructor() {\n\n    const injector: Injector = StaticInjectorService.getInjector();\n\n    this.environmentService = injector.get<EnvironmentService>(EnvironmentService as Type<EnvironmentService>);\n    this.httpClient = injector.get<HttpClient>(HttpClient as Type<HttpClient>);\n    this.logger = injector.get<LoggerService>(LoggerService as Type<LoggerService>);\n\n    this.config = this.environmentService.getConfig();\n  }\n\n  protected getUrlPrefix(): string {\n    return this.config.serverScheme + '://' + this.config.serverHost + ':' + this.config.serverPort;\n  }\n\n  protected getHttpOptions(params: any = undefined): HttpOptions {\n\n    // his.logger.info('CollectionService: getHttpOptions()');\n\n    if (!this.httpOptions) {\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        observe: 'response',\n        params: undefined\n      };\n\n    }\n\n    if (params) {\n      this.httpOptions.params = params;\n    }\n\n    // this.logger.info('httpOptions: ' + JSON.stringify(this.httpOptions, null, 2));\n\n    return this.httpOptions;\n  }\n\n  // https://angular.io/guide/http#getting-error-details\n\n  /*\n\n  protected handleError<T>(operation = 'operation', result?: T) {\n    return (error: any): Observable<T> => {\n\n      this.logger.info('ContactsService: handleError()');\n\n      // TODO: send the error to your remote logging infrastructure e.g., Sentry\n\n      // TODO: better job of transforming error for user consumption\n      this.logger.error(operation + ' failed: ' + error.message);\n\n      // Let the app keep running by returning an empty result (i.e., [])\n      return of(result as T);\n    };\n  }\n\n  */\n\n  /*\n\n  protected handleError(error: HttpErrorResponse) {\n\n    if (error.error instanceof ErrorEvent) {\n\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n\n    } else {\n\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n\n    // return an observable with a user-facing error message\n    return throwError('Something bad happened; please try again later.');\n\n  }\n\n  */\n\n}\n\n// https://angular.io/guide/http#getting-error-details\n\n// https://stackoverflow.com/questions/47761262/angular-4-5-httpclient-argument-of-type-string-is-not-assignable-to-body/47761516#47761516\n\n/*\n\nprotected handleError(error: HttpErrorResponse) {\n\n  if (error.error instanceof ErrorEvent) {\n\n    // A client-side or network error occurred. Handle it accordingly.\n    console.error('An error occurred:', error.error.message);\n\n  } else {\n\n    // The backend returned an unsuccessful response code.\n    // The response body may contain clues as to what went wrong,\n    console.error(\n      `Backend returned code ${error.status}, ` +\n      `body was: ${error.error}`);\n  }\n\n  // return an observable with a user-facing error message\n  return throwError('Something bad happened; please try again later.');\n\n}\n\n*/\n\n/*\n\nprotected handleError<T>(operation = 'operation', result?: T) {\n  return (error: any): Observable<T> => {\n\n    // TODO: send the error to your remote logging infrastructure e.g., Sentry\n    this.logger.error(error);\n\n    // TODO: better job of transforming error for user consumption\n    // this.logger.info(operation + ' failed: ' + error.message);\n\n    // Let the app keep running by returning an empty result\n    return of(result as T);\n  };\n}\n\n*/\n\n/*\n\n  protected getHttpOptions(params: HttpParams = null) {\n\n    this.logger.info('CollectionService: getHttpOptions()');\n\n    if (!this.httpOptions) {\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        }),\n        params: null\n      };\n\n    }\n\n    this.httpOptions.params = params;\n\n    // this.logger.info(JSON.stringify(this.httpOptions));\n\n    return this.httpOptions;\n  }\n\n*/\n\n/*\n\n  protected getHttpOptions(params: HttpParams) {\n\n    this.logger.info('CollectionService: getHttpOptions()');\n\n    if (!this.httpOptions) {\n\n      const user: User = this.authService.getUser();\n\n      if (typeof user === 'undefined') {\n        this.logger.error('CollectionService getHttpOptions() - user is undefined');\n        return this.httpOptions;\n      }\n\n      const token = user.username + ':' + user.password;\n\n      this.logger.info('CollectionService getHttpOptions() - token: ' + token);\n\n      this.httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json',\n          'Authorization': 'Basic ' + btoa(token)\n        }),\n        params: null\n      };\n\n    }\n\n    this.httpOptions.params = params;\n\n    // this.logger.info(JSON.stringify(this.httpOptions));\n\n    return this.httpOptions;\n  }\n\n*/\n\n\n","import { HttpResponse} from '@angular/common/http';\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\n\nimport { CollectionService } from '../abstract/collection/collection.service';\n\nimport { Contact } from '../../models/contact';\nimport { ContactAdapter } from '../../adapters/contact.adapter';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactsService extends CollectionService {\n\n  constructor(private adapter: ContactAdapter) {\n\n    super();\n\n    this.url = this.getUrlPrefix() + '/api/individuals/';\n  }\n\n  public find(filter: string, offset: number = 0, limit: number = 100): Observable<any> {\n\n    this.logger.info('ContactsService: find()');\n\n    let url = this.url;\n    let queryParams;\n\n    if (filter.length) {\n\n      url = this.getUrlPrefix() + '/api/individuals/search/findByFamilyNameStartsWith';\n      queryParams = '?name=' + filter + '&page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n\n    } else {\n\n      queryParams = '?page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n\n    }\n\n    this.logger.info('url: ' + url);\n    this.logger.info('queryParams: ' + queryParams);\n\n    return this.httpClient.get(url + queryParams, this.getHttpOptions()).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: find() completed');\n      })\n    );\n\n  }\n\n  public findById(id: string): Observable<Contact> {\n\n    return this.httpClient.get(this.url + id).pipe(\n\n      map((item: any) => this.adapter.adapt(item)),\n\n      tap(() => {\n        this.logger.info('ContactsService: findById() completed');\n      })\n    );\n\n  }\n\n  public create(contact: Contact): Observable<HttpResponse<Contact>> {\n\n    return this.httpClient.post<HttpResponse<Contact>>(this.url, contact, this.getHttpOptions()).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: create() completed');\n      })\n    );\n\n  }\n\n  public update(id: string, contact: Contact): Observable<HttpResponse<Contact>> {\n\n    return this.httpClient.patch<HttpResponse<Contact>>(this.url + id, contact, this.getHttpOptions()).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: update() completed');\n      })\n    );\n\n  }\n\n  public delete(id: string): Observable<Contact> {\n\n    return this.httpClient.delete<Contact>(this.url + id).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: delete() completed');\n      })\n    );\n\n  }\n\n}\n\n/*\n\n  public findByFamilyNameStartsWith(name: string, offset: number = 0, limit: number = 100): Observable<any> {\n\n    this.logger.info('ContactsService: findByFamilyNameStartsWith()');\n\n    const queryParams = '?name=' + name + '&page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n\n    this.logger.info('ContactsService queryParams: ' + queryParams);\n\n    return this.httpClient.get(this.url + 'search/findByFamilyNameStartsWith' + queryParams, this.getHttpOptions()).pipe(\n\n      // tap((response: any) => {\n      tap(() => {\n\n        // this.logger.info('response: ' + JSON.stringify(response.body, null, 2) + '\\n');\n\n        this.logger.info('ContactsService: findByFamilyNameStartsWith() completed');\n\n      })\n\n    );\n\n  }\n\n*/\n\n/*\n\n  const HTTP_SERVER_ERROR_CONNECTION_REFUSED = 'Connection refused';\n\n  public find(filter: string, offset: number = 0, limit: number = 100): Observable<any> {\n\n    this.logger.info('ContactsService: find()');\n\n    let queryParams;\n\n    if (filter.length) {\n\n      this.url = 'http://localhost:' + this.config.serverPort + '/api/individuals/search/findByFamilyNameStartsWith';\n      queryParams = '?name=' + filter + '&page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n\n    } else {\n\n      this.url = 'http://localhost:' + this.config.serverPort + '/api/individuals/';\n      queryParams = '?page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n    }\n\n    this.logger.info('ContactsService url: ' + this.url);\n    this.logger.info('ContactsService queryParams: ' + queryParams);\n\n    return this.httpClient.get(this.url + queryParams, this.getHttpOptions()).pipe(\n\n      // tap((response: any) => {\n      tap(() => {\n\n        // this.logger.info('response: ' + JSON.stringify(response.body, null, 2) + '\\n');\n\n        this.logger.info('ContactsService: find() completed');\n\n      }),\n      catchError(error => {\n\n        this.logger.info('ContactsService: find() -> catchError()');\n\n        if (error === undefined) {\n\n          error = new Error(HTTP_SERVER_ERROR_CONNECTION_REFUSED);\n          throw error;\n\n        } else {\n\n          return this.handleError('Find', []);\n          // return throwError(error);\n        }\n\n      })\n\n    );\n\n  }\n\n  public findByFamilyNameStartsWith(name: string, offset: number = 0, limit: number = 100): Observable<any> {\n\n    this.logger.info('ContactsService: findByFamilyNameStartsWith()');\n\n    const queryParams = '?name=' + name + '&page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n\n    this.logger.info('ContactsService queryParams: ' + queryParams);\n\n    return this.httpClient.get(this.url + 'search/findByFamilyNameStartsWith' + queryParams, this.getHttpOptions()).pipe(\n\n      // tap((response: any) => {\n      tap(() => {\n\n        // this.logger.info('response: ' + JSON.stringify(response.body, null, 2) + '\\n');\n\n        this.logger.info('ContactsService: findByFamilyNameStartsWith() completed');\n\n      }),\n      catchError(error => {\n\n        this.logger.info('ContactsService: findByFamilyNameStartsWith() -> catchError()');\n\n        if (error === undefined) {\n\n          error = new Error(HTTP_SERVER_ERROR_CONNECTION_REFUSED);\n          throw error;\n\n        } else {\n\n          return this.handleError('findByFamilyNameStartsWith', []);\n          // return throwError(error);\n        }\n\n      })\n\n    );\n\n  }\n\n  public findById(id: string): Observable<Contact> {\n\n    return this.httpClient.get(this.url + id).pipe(\n\n      map((item: any) => this.adapter.adapt(item)),\n\n      tap(() => {\n        this.logger.info('ContactsService: findOne() completed');\n      }),\n      catchError(this.handleError)\n    );\n\n  }\n\n  public create(contact: Contact): Observable<HttpResponse<Contact>> {\n\n    return this.httpClient.post<HttpResponse<Contact>>(this.url, contact, this.getHttpOptions()).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: create() completed');\n      }),\n      catchError(this.handleError)\n    );\n\n  }\n\n  public update(id: string, contact: Contact): Observable<HttpResponse<Contact>> {\n\n    return this.httpClient.patch<HttpResponse<Contact>>(this.url + id, contact, this.getHttpOptions()).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: update() completed');\n      }),\n      catchError(this.handleError)\n    );\n\n  }\n\n  public delete(id: string): Observable<Contact> {\n\n    return this.httpClient.delete<Contact>(this.url + id).pipe(\n      tap(() => {\n        this.logger.info('ContactsService: delete() completed');\n      }),\n      catchError(this.handleError)\n    );\n  }\n\n*/\n\n/*\n\n  public find(offset: number = 0, limit: number = 100, filter: string = ''): Observable<any> {\n\n    this.logger.info('ContactsService: find()');\n\n    let filterParam = '';\n\n    if (filter.length) {\n      filterParam = '&name=' + filter;\n    }\n\n    // ?page=0&size=10&name=F&sort=familyName&familyName.dir=asc\n    // const queryParams = '?page=' + offset + '&size=' + limit + filterParam + '&sort=familyName&familyName.dir=asc';\n    // const queryParams = '?page=' + offset + '&size=' + limit;\n    // const queryParams = '?page=' + offset + '&size=' + limit + '&sort=sort&sort.dir=asc';\n    const queryParams = '?page=' + offset + '&size=' + limit + '&sort=name.familyName&name.familyName.dir=asc';\n\n    this.logger.info('ContactsService queryParams: ' + queryParams);\n\n    return this.httpClient.get(this.url + queryParams, this.getHttpOptions()).pipe(\n\n      // tap((response: any) => {\n      tap(() => {\n\n        // this.logger.info('response: ' + JSON.stringify(response.body, null, 2) + '\\n');\n\n        this.logger.info('ContactsService: find() completed');\n\n      }),\n      catchError(error => {\n\n        this.logger.info('ContactsService: find() -> catchError()');\n\n        if (error === undefined) {\n\n          error = new Error(HTTP_SERVER_ERROR_CONNECTION_REFUSED);\n          throw error;\n\n        } else {\n\n          return this.handleError('Find', []);\n          // return throwError(error);\n        }\n\n      })\n\n    );\n\n  }\n\n*/\n\n/*\n\n  public checkPhotoUrl(url: string): Promise<string> {\n\n    return new Promise<string>((resolve, reject) => {\n\n      this.httpClient.get('http://localhost:3001/' + url).toPromise().then(success => {\n        resolve(url);\n      }, error => {\n        reject('assets/images/photos/male-avatar.svg');\n      });\n\n    });\n\n  }\n\n  public findOne(id: string): Observable<Contact> {\n\n    return this.httpClient.get(this.url + id).pipe(\n\n      map((item: any) => this.adapter.adapt(item)),\n\n      tap(() => {\n        this.logger.info('ContactsService: findOne() completed');\n      }),\n      catchError(this.handleError)\n    );\n\n  }\n\n*/\n\n// https://docs.spring.io/spring-data/rest/docs/current/reference/html/#paging-and-sorting\n\n// https://angular.io/guide/http#reading-the-full-response\n\n// https://angular.io/guide/http#getting-error-details\n\n/*\n\n  // public find(): Observable<Contact[]> {\n\n  // path, operator, value\n  // e.g., familyName, =, B%\n  // [familyName]=B%\n\n  public find(offset: number = 0, limit: number = 100, value: string = ''): Observable<any> {\n\n    this.logger.info('ContactsService: find()');\n\n    let filterParam = '';\n\n    if (value.length) {\n      filterParam = '&filter[familyName]=' + value + '%';\n    }\n\n    // const queryParams = '?offset=' + offset + '&limit=' + limit + filterParam;\n    // page=0&size=2&sort=name,asc\n    // &sort=familyName&familyName.dir=asc\n    // const queryParams = '?page=' + 0 + '&size=' + 10 + '&sort=familyName&familyName.dir=asc';\n    // const queryParams = '?page=' + 0 + '&size=' + 10 + '&sort=familyName,asc';\n\n    // nameStartsWith?name=K&sort=name&name.dir=desc\n    const queryParams = '?page=' + 0 + '&size=' + 10 + '&sort=familyName&familyName.dir=asc';\n\n    this.logger.info('ContactsService queryParams: ' + queryParams);\n\n    return this.httpClient.get(this.url + queryParams, this.getHttpOptions()).pipe(\n\n      // tap((response: any) => {\n      tap(() => {\n\n        // this.logger.info('response: ' + JSON.stringify(response.body, null, 2) + '\\n');\n\n        this.logger.info('ContactsService: find() completed');\n\n      }),\n      catchError(error => {\n\n        this.logger.info('ContactsService: find() -> catchError()');\n\n        if (error === undefined) {\n\n          error = new Error(HTTP_SERVER_ERROR_CONNECTION_REFUSED);\n          throw error;\n\n        } else {\n\n          return this.handleError('Find', []);\n          // return throwError(error);\n        }\n\n      })\n\n    );\n\n  }\n\n*/\n\n/*\n\n      // map((data: any[]) => data.map(item => this.adapter.adapt(item))),\n      // map((response: any) => response.body.data.map(item => this.adapter.adapt(item))),\n\n*/\n","export enum PartyType {\n  INDIVIDUAL = 'INDIVIDUAL',\n  ORGANISATION = 'ORGANISATION',\n  ORGANISATIONAL_UNIT = 'ORGANISATIONAL_UNIT'\n}\n"],"names":[],"sourceRoot":"webpack:///"}